# Cargar paquetes para análisis transcriptómico y visualización
library(Seurat)
library(SingleCellExperiment)
library(Matrix.utils)
library(data.table)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
library(DGEobj.utils)
library(plotly)
library(pheatmap)
library(corrplot)
library(viridis)
library(corto)
library(DESeq2)
library(SeuratObject)
library(openxlsx)
library(dplyr)
library(EPIC)
library(CMSclassifier)
library(janitor)
library(ggpubr)
library(ggplot2)
library(survival)
library(survminer)
library(GEOquery)
library(biomaRt)
library(ggrepel)

# Descargar datos de expresión desde GEO
data <- getGEO("GSE5851", GSEMatrix = TRUE)
expr_gse5851 <- exprs(data[[1]])

# Leer datos clínicos
clinical <- read.csv("Cetu treated patients_Clinical info.csv", header = TRUE, sep = ";")
clinical <- clinical[1:80, ]  # Mantener solo pacientes con datos completos
row.names(clinical) <- clinical$GSE5851  # Usar ID como rownames

# Obtener nombres de sondas
affyprobe <- row.names(expr_gse5851)

# Conectar con Ensembl y mapear sondas a genes
mart <- useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
probetogene <- getBM(attributes = c("hgnc_symbol", "affy_hg_u133a_2"),
                     filters = "affy_hg_u133a_2",
                     values = affyprobe,
                     mart = mart)

# Eliminar sondas duplicadas
probetogene <- probetogene[!duplicated(probetogene$affy_hg_u133a_2), ]
row.names(probetogene) <- probetogene$affy_hg_u133a_2

# Fusionar datos de expresión con nombres de genes
expr <- merge(probetogene, expr_gse5851, by = "row.names")

# Colapsar múltiples sondas por gen (máximo valor)
data_gene_collapse <- aggregate(expr, by = list(expr$hgnc_symbol), FUN = "max")
data_gene_collapse <- data_gene_collapse[data_gene_collapse$hgnc_symbol != "", ]
row.names(data_gene_collapse) <- data_gene_collapse$hgnc_symbol
data_gene_collapse <- data_gene_collapse[, -c(1:4)]

# Variable de respuesta categórica simplificada
clinical$DCG <- ifelse(clinical$Best.Clinical.Response.Assessment %in% c("SD", "CR", "PR"), "R",
                       ifelse(clinical$Best.Clinical.Response.Assessment == "UTD", "UTD", "NR"))

# Filtrar pacientes KRAS wild-type
clinical_wt <- subset(clinical, KRAS.Mutation == "WT")

# Tabla resumen de respuesta
tabyl(clinical_wt, DCG, Best.Clinical.Response.Assessment)

# Eliminar pacientes sin respuesta evaluada
clinical_clean <- subset(clinical_wt, DCG %in% c("R", "NR"))

# Transformar expresión a log2
expr_log2 <- log2(data_gene_collapse + 1)

# Submatriz con pacientes seleccionados
expr_matrix <- expr_log2[, clinical_clean$GSE5851]

# Verificar concordancia de nombres
all(colnames(expr_matrix) == clinical_clean$GSE5851)  # TRUE

# Modelo lineal con limma
group <- factor(clinical_clean$DCG, levels = c("NR", "R"))
design <- model.matrix(~ group)

fit <- lmFit(expr_matrix, design)
fit <- eBayes(fit)
res <- topTable(fit, coef = "groupR", number = Inf)

# Genes significativos (p < 0.05 y |logFC| > 1.5)
sig_genes <- res[which(res$P.Value < 0.05 & abs(res$logFC) > 1.5), ]
# Etiquetar genes significativos
res <- res %>%
  mutate(Significance = ifelse(P.Value < 0.05 & abs(logFC) > 1.5, "Significant", "Not significant"),
         threshold = P.Value < 0.05 & abs(logFC) > 1.5)

# Volcano Plot sin etiquetas
ggplot(res, aes(x = logFC, y = -log10(P.Value), color = Significance)) +
  geom_point(alpha = 0.6) +
  scale_color_manual(values = c("Not significant" = "grey", "Significant" = "red")) +
  theme_minimal() +
  labs(title = "Volcano Plot", x = "log2 Fold Change", y = "-log10(p-value)", color = "Significance") +
  theme(legend.position = "bottom")

# Volcano Plot con etiquetas
sig_genes <- res %>% filter(Significance == "Significant")
ggplot(res, aes(x = logFC, y = -log10(P.Value), color = Significance)) +
  geom_point(alpha = 0.6) +
  geom_text_repel(data = sig_genes, aes(label = rownames(sig_genes)), size = 3, max.overlaps = 15) +
  scale_color_manual(values = c("Not significant" = "grey", "Significant" = "red")) +
  theme_minimal() +
  labs(title = "Volcano Plot", x = "log2 Fold Change", y = "-log10(p-value)", color = "Significance") +
  theme(legend.position = "bottom")
# Subconjunto con genes significativos
genes_sig <- rownames(sig_genes)
expr_sig <- expr_log2[genes_sig, clinical_clean$GSE5851]

# Anotaciones de grupos
annotation_col <- data.frame(Group = clinical_clean$DCG)
row.names(annotation_col) <- clinical_clean$GSE5851

# Heatmap de expresión
pheatmap(expr_sig,
         scale = "row",
         annotation_col = annotation_col,
         show_rownames = FALSE,
         clustering_distance_rows = "correlation",
         clustering_distance_cols = "correlation",
         main = "Heatmap - Genes diferenciales")

# Filtrar genes con logFC > 1 o < -1
sig_genes <- res[res$P.Value < 0.05 & abs(res$logFC) > 1, ]

# Firmas de expresión
genes_responder <- rownames(sig_genes[sig_genes$logFC > 0, ])
genes_nonresponder <- rownames(sig_genes[sig_genes$logFC < 0, ])

# Ordenar por logFC
genes_responder <- genes_responder[order(sig_genes[genes_responder, "logFC"], decreasing = TRUE)]
genes_nonresponder <- genes_nonresponder[order(sig_genes[genes_nonresponder, "logFC"], decreasing = FALSE)]

# Exportar firmas a CSV
write.table(genes_responder, "signature_responders.CSV", row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(genes_nonresponder, "signature_nonresponders.CSV", row.names = FALSE, col.names = FALSE, quote = FALSE)
































