# Instalar y cargar paquetes necesarios
if (!requireNamespace("BiocManager", quietly=TRUE)) install.packages("BiocManager")
BiocManager::install(c("GEOquery", "GSVA", "survival", "survminer", "hgu133plus2.db"))
install.packages("gtsummary")

library(GEOquery)
library(GSVA)
library(survival)
library(survminer)
library(hgu133plus2.db)
library(corto)
library(gtsummary)
# Descargar el dataset GSE39582
gse <- getGEO("GSE39582", GSEMatrix = TRUE, AnnotGPL = TRUE)
exprSet <- gse[[1]]

# Extraer matriz de expresión (genes x muestras)
expr <- exprs(exprSet)

# Filtrar pacientes en estadio IV (metastásico)
clinical <- pData(exprSet)
clinical_stage4 <- clinical[grep("tnm.stage: 4", tolower(clinical$characteristics_ch1.4)), ]
clinical_stage4_clean <- clinical_stage4[!is.na(clinical_stage4$characteristics_ch1.14) &
                                         !is.na(clinical_stage4$characteristics_ch1.13), ]

# Extraer variables clínicas de interés
clinical$survival_time <- as.numeric(gsub("os.delay \\(months\\): ", "", clinical$characteristics_ch1.14))
clinical$survival_status <- as.numeric(gsub(".*: ", "", clinical$characteristics_ch1.13))

# Filtrar muestras con datos transcriptómicos
samples_with_expression <- intersect(rownames(clinical_stage4_clean), colnames(expr))
expr_stage4_clean <- expr[, samples_with_expression]
clinical_stage4_clean <- clinical_stage4_clean[samples_with_expression, ]

# Renombrar columnas para evento y tiempo
colnames(clinical_stage4_clean)[23:24] <- c("event", "time")
clinical_stage4_clean$event <- as.numeric(gsub("os.event:", "", clinical_stage4_clean$event))
clinical_stage4_clean$time <- as.numeric(gsub("os.delay \\(months\\):", "", clinical_stage4_clean$time))

# Obtener la plataforma (GPL570)
annotation(gse[[1]])

# Mapear sondas a símbolos génicos
probe2gene <- toTable(hgu133plus2SYMBOL)
probe2gene_filtered <- probe2gene[probe2gene$probe_id %in% rownames(expr), ]

# Aplicar anotación y colapsar por símbolo génico
expr_annot <- expr[probe2gene_filtered$probe_id, ]
rownames(expr_annot) <- probe2gene_filtered$symbol
expr_collapsed <- aggregate(expr_annot, by = list(Gene = rownames(expr_annot)), FUN = mean)
rownames(expr_collapsed) <- expr_collapsed$Gene
expr_collapsed <- expr_collapsed[, -1]

# Transponer la matriz y convertir a numérico
expr_collapsed_t <- as.data.frame(t(expr_collapsed))
expr_collapsed_t[] <- lapply(expr_collapsed_t, function(x) as.numeric(as.character(x)))

# Leer genes de la firma de respondedores
Responders_signature <- read.csv("signature_responders.csv", header = FALSE)[[1]]

# Calcular ssGSEA
ssgsea_responders <- ssgsea(as.data.frame(t(expr_collapsed_t)), list(Responders_signature))
ssgsea_responders <- as.data.frame(t(ssgsea_responders))
colnames(ssgsea_responders) <- "Responders_signature"

# Unir datos clínicos y scores
Responders_data <- merge(clinical_stage4_clean, ssgsea_responders, by = "row.names")

# Determinar punto de corte óptimo
cutoff <- surv_cutpoint(Responders_data, time = "time", event = "event",
                        variables = c("Responders_signature"))
cat <- surv_categorize(cutoff)
cat$Responders_signature <- factor(cat$Responders_signature, levels = c("low", "high"))

# Etiquetas de grupo
low <- paste("Low (n = ", nrow(cat[cat$Responders_signature == "low", ]), ")", sep = "")
high <- paste("High (n = ", nrow(cat[cat$Responders_signature == "high", ]), ")", sep = "")

# Curva de supervivencia (Kaplan-Meier)
p <- ggpar(
  ggsurvplot(surv_fit(Surv(time, event) ~ Responders_signature, data = cat),
             data = cat, risk.table = FALSE, pval = FALSE, conf.int = FALSE,
             legend.labs = c(low, high), palette = c("blue", "red"),
             legend.title = "Responders signature", legend = c(0.85, 0.15),
             xlab = "Time (Months)", ylab = "Progression-free survival",
             ggtheme = theme_pubclean()),
  font.x = c(16, "bold", "black"),
  font.y = c(16, "bold", "black"),
  font.legend = c(14, "black"),
  font.tickslab = c(14, "black")
)

# Análisis de Cox
coxph(Surv(time, event) ~ Responders_signature, data = cat)
coxph(Surv(time, event) ~ Responders_signature, data = cat) %>%
  gtsummary::tbl_regression(exp = TRUE)

# Añadir estadísticas manualmente (editar según resultados)
p$plot + annotate("text", x = -5, y = 0.125,
                  label = "High vs Low = 0.62 [0.33, 1.16]\n p = 0.14\n LRT-p = 0.1379", size = 5, hjust = 0)

# Leer genes de la firma de no respondedores
NONResponders_signature <- read.csv("signature_nonresponders.csv", header = FALSE)[[1]]

# Calcular ssGSEA
ssgsea_nonresponders <- ssgsea(as.data.frame(t(expr_collapsed_t)), list(NONResponders_signature))
ssgsea_nonresponders <- as.data.frame(t(ssgsea_nonresponders))
colnames(ssgsea_nonresponders) <- "nonResponders_signature"

# Unir datos clínicos y scores
NONResponders_data <- merge(clinical_stage4_clean, ssgsea_nonresponders, by = "row.names")

# Determinar punto de corte óptimo
cutoff <- surv_cutpoint(NONResponders_data, time = "time", event = "event",
                        variables = c("nonResponders_signature"))
cat <- surv_categorize(cutoff)
cat$nonResponders_signature <- factor(cat$nonResponders_signature, levels = c("low", "high"))

# Etiquetas de grupo
low <- paste("Low (n = ", nrow(cat[cat$nonResponders_signature == "low", ]), ")", sep = "")
high <- paste("High (n = ", nrow(cat[cat$nonResponders_signature == "high", ]), ")", sep = "")

# Curva de supervivencia (Kaplan-Meier)
p <- ggpar(
  ggsurvplot(surv_fit(Surv(time, event) ~ nonResponders_signature, data = cat),
             data = cat, risk.table = FALSE, pval = FALSE, conf.int = FALSE,
             legend.labs = c(low, high), palette = c("blue", "red"),
             legend.title = "Non-Responders signature", legend = c(0.85, 0.15),
             xlab = "Time (Months)", ylab = "Progression-free survival",
             ggtheme = theme_pubclean()),
  font.x = c(16, "bold", "black"),
  font.y = c(16, "bold", "black"),
  font.legend = c(14, "black"),
  font.tickslab = c(14, "black")
)

# Análisis de Cox
coxph(Surv(time, event) ~ nonResponders_signature, data = cat)
coxph(Surv(time, event) ~ nonResponders_signature, data = cat) %>%
  gtsummary::tbl_regression(exp = TRUE)

# Añadir estadísticas manualmente (editar según resultados)
p$plot + annotate("text", x = -5, y = 0.125,
                  label = "High vs Low = 2.29 [1.13, 4.62]\n p = 0.021\n LRT-p = 0.0209", size = 5, hjust = 0)

